{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Maths en Seconde : Algorithmique et programmation","text":""},{"location":"#programme-de-seconde","title":"Programme de Seconde","text":"<p>Algorithmique et programmation</p> <p>La d\u00e9marche algorithmique est, depuis les origines, une composante essentielle de l\u2019activit\u00e9 math\u00e9matique. Au cycle 4, en math\u00e9matiques et en technologie, les \u00e9l\u00e8ves ont appris \u00e0 \u00e9crire, mettre au point et ex\u00e9cuter un programme simple. Une consolidation des acquis du cycle 4 est propos\u00e9e autour de deux id\u00e9es essentielles :</p> <ul> <li>la notion de fonction ;</li> <li>la programmation comme production d\u2019un texte dans un langage informatique.</li> </ul> <p>Dans le cadre de cette activit\u00e9, les \u00e9l\u00e8ves s\u2019exercent \u00e0 :</p> <ul> <li>d\u00e9crire des algorithmes en langage naturel ou dans un langage de programmation ;</li> <li>en r\u00e9aliser quelques-uns \u00e0 l\u2019aide d\u2019un programme simple \u00e9crit dans un langage de programmation textuel ;</li> <li>interpr\u00e9ter, compl\u00e9ter ou modifier des algorithmes plus complexes.</li> </ul> <p>Un langage de programmation simple d\u2019usage est n\u00e9cessaire pour l\u2019\u00e9criture des programmes informatiques. Le langage choisi est Python, langage interpr\u00e9t\u00e9, concis, largement r\u00e9pandu et pouvant fonctionner dans une diversit\u00e9 d\u2019environnements. Les \u00e9l\u00e8ves sont entra\u00een\u00e9s \u00e0 passer du langage naturel \u00e0 Python et inversement.</p> <p>L\u2019algorithmique a une place naturelle dans tous les champs des math\u00e9matiques et les probl\u00e8mes ainsi trait\u00e9s doivent \u00eatre en relation avec les autres parties du programme (fonctions, g\u00e9om\u00e9trie, statistiques et probabilit\u00e9, logique) mais aussi avec les autres disciplines ou la vie courante.</p> <p>\u00c0 l\u2019occasion de l\u2019\u00e9criture d\u2019algorithmes et de petits programmes, il convient de transmettre aux \u00e9l\u00e8ves l\u2019exigence d\u2019exactitude et de rigueur, et de les entra\u00eener aux pratiques syst\u00e9matiques de v\u00e9rification et de contr\u00f4le. En programmant, les \u00e9l\u00e8ves revisitent les notions de variables et de fonctions sous une forme diff\u00e9rente.</p> <p>1. Utiliser les variables et les instructions \u00e9l\u00e9mentaires</p> ContenusCapacit\u00e9s attendues <ul> <li>Variables informatiques de type entier, bool\u00e9en, flottant, cha\u00eene de caract\u00e8res.</li> <li>Affectation (not\u00e9e \u2190 en langage naturel).</li> <li>S\u00e9quence d\u2019instructions.</li> <li>Instruction conditionnelle.</li> <li>Boucle born\u00e9e (for), boucle non born\u00e9e (while).</li> </ul> <ul> <li>Choisir ou d\u00e9terminer le type d\u2019une variable (entier, flottant ou cha\u00eene de caract\u00e8res).</li> <li>Concevoir et \u00e9crire une instruction d\u2019affectation, une s\u00e9quence d\u2019instructions, une instruction conditionnelle.</li> <li>\u00c9crire une formule permettant un calcul combinant des variables.</li> <li>Programmer, dans des cas simples, une boucle born\u00e9e, une boucle non born\u00e9e.</li> <li>Dans des cas plus complexes : lire, comprendre, modifier ou compl\u00e9ter un algorithme ou un programme.</li> </ul> <p>2. Notion de fonction</p> ContenusCapacit\u00e9s attendues <ul> <li>Fonctions \u00e0 un ou plusieurs arguments.</li> <li>Fonction renvoyant un nombre al\u00e9atoire. S\u00e9rie statistique obtenue par la r\u00e9p\u00e9tition de l\u2019appel d\u2019une telle fonction.</li> </ul> <ul> <li>\u00c9crire des fonctions simples ; lire, comprendre, modifier, compl\u00e9ter des fonctions plus complexes. Appeler une fonction.</li> <li>Lire et comprendre une fonction renvoyant une moyenne, un \u00e9cart type. Aucune connaissance sur les listes n\u2019est exig\u00e9e.</li> <li>\u00c9crire des fonctions renvoyant le r\u00e9sultat num\u00e9rique d\u2019une exp\u00e9rience al\u00e9atoire, d\u2019une r\u00e9p\u00e9tition d\u2019exp\u00e9riences al\u00e9atoires ind\u00e9pendantes.</li> </ul>"},{"location":"1Python/01Python/","title":"Pr\u00e9sentation de Python","text":""},{"location":"1Python/01Python/#python-cest-quoi","title":"Python, c'est quoi?","text":"<p>C'est un langage de programmation invent\u00e9 en 1991 par Guido Van Rossum.</p> <p>Ce langage est un des langages les plus utilis\u00e9s actuellement (avec le C, le Java, le Javascript ...), notamment dans le monde scientifique. Il est aussi parfaitement adapt\u00e9 \u00e0 la d\u00e9couverte de la programmation, de par sa clart\u00e9 et sa concision (il a aussi bien s\u00fbr beaucoup de d\u00e9fauts !).</p> <p>C'est pourquoi c'est le langage de programmation utilis\u00e9 au lyc\u00e9e en SNT, en NSI, en Physique-Chimie et bien s\u00fbr en Math\u00e9matiques.</p> <p>Python est un langage de programmation invent\u00e9 en 1991 par Guido Van Rossum.</p> <p>Ce langage est un des langages les plus utilis\u00e9s actuellement (avec le C, le Java, le Javascript ...), notamment dans le monde scientifique.</p> <p>Il est aussi un des langages de d\u00e9veloppement de nombreuses applications (Spotify, Instagram, Netflix), des sites Web, de traitement de donn\u00e9es,  du noyau Linux... Python fait \u00e0 peu pr\u00e8s tout ce qu'on veut. Sauf le caf\u00e9.</p> <p>Il est aussi parfaitement adapt\u00e9 \u00e0 la d\u00e9couverte de la programmation, de par sa clart\u00e9 et sa concision (il a aussi bien s\u00fbr beaucoup de d\u00e9fauts !).</p> <p>C'est pourquoi c'est le langage de programmation utilis\u00e9 au lyc\u00e9e en Math\u00e9matiques, en Physique-Chimie, en SNT et bien s\u00fbr en NSI.</p>"},{"location":"1Python/01Python/#ordinateur","title":"Ordinateur","text":"<p>Mis \u00e0 part des calculs (beaucoup et tr\u00e8s rapidement), un ordinateur ne sait pas faire \u00e9norm\u00e9ment de choses... Il sait faire les instructions suivantes:</p> <ul> <li>g\u00e9rer des donn\u00e9es stock\u00e9es dans des variables;</li> <li>faire des tests (entre les valeurs des variables) et choisir une instruction \u00e0 ex\u00e9cuter en fonction du r\u00e9sultat de ces tests;</li> <li>r\u00e9p\u00e9ter des instructions;</li> <li>encha\u00eener des instructions.</li> </ul> <p>Et c'est (\u00e0 peu pr\u00e8s) tout.</p> <p>Citation</p> <p>Un ordinateur, c'est compl\u00e8tement con.</p> <p>Citation</p> <p>Programmer, c'est compliqu\u00e9.</p> <p>Ces deux citations sont de G\u00e9rard Berry, professeur d'Informatique au coll\u00e8ge de France. La premi\u00e8re signifie qu'un ordinateur ne prend pas de d\u00e9cision, et attend des instructions somme toute assez basiques. La seconde signifie que c'est \u00e0 l'\u00eatre humain de traduire sa fa\u00e7on de penser et de r\u00e9soudre en probl\u00e8me en une s\u00e9quence de ces quelques instructions basiques. Et ce n'est pas toujours simple.</p> <p>Bien s\u00fbr, il faut \u00e9galement conna\u00eetre la syntaxe de ces instructions, c'est-\u00e0-dire comment les \u00e9crire correctement pour que l'ordinateur puisse les interpr\u00e9ter sans erreur (car un ordinateur ne sait pas corriger vos erreurs, cf. citation 1).</p> <p>Et n'oubliez pas:</p> <p>Citation</p> <p>99% des probl\u00e8mes en informatique se situent entre le clavier et la chaise.</p>"},{"location":"1Python/02Travail/","title":"Travailler avec Python","text":"<p>Pour pouvoir utiliser un langage de programmation, on a besoin d'un IDE (environnement de d\u00e9veloppement). Il en existe beaucoup...</p> <p>\u00c9diteur et console</p> <p>Un IDE, quel qu'il soit (Basthon en ligne, EduPython, Thonny, etc) comporte deux espaces importants:</p> <ul> <li>l'\u00e9diteur : c'est la partie o\u00f9 l'on tape son programme (les lignes sont g\u00e9n\u00e9ralement num\u00e9rot\u00e9es);</li> <li>la console: c'est l'endroit o\u00f9 s'affichent les sorties du programme, et o\u00f9 on peut \u00e9galement entrer des instructions simples. On le rep\u00e8re \u00e0 l'aide des chevrons <code>&gt;&gt;&gt;</code> .</li> </ul> <p>Et bien entendu, un bouton \"Ex\u00e9cuter\" (triangle vert bien souvent) pour... ex\u00e9cuter le code.</p> En ligneSur l'ENT Lyc\u00e9e Connect\u00e9 (recommand\u00e9)Au lyc\u00e9e\u00c0 la maison <p>Rendez-vous sur la page https://console.basthon.fr/</p> <p></p> <p><p> \u00c9diteur \u00e0 gauche, console \u00e0 droite </p></p> <p>Lancez l'application Capytale disponible dans les applications de l'ENT:</p> <p> </p> <p>Puis cliquez sur Mes activit\u00e9s et cr\u00e9ez une activit\u00e9 Script-Console. Vous pourrez ensuite retrouver ces activit\u00e9s dans Ma liste d'activit\u00e9s.</p> <p> </p> <p>Sur les postes du lyc\u00e9e est install\u00e9 EduPython. Cherchez l'icone:</p> <p></p> <p></p> <p>Sur son PC personnel (ou familial), je vous conseille plut\u00f4t d'installer Thonny, plus simple:</p> <ol> <li> <p>Rendez vous sur la page https://thonny.org/</p> </li> <li> <p>T\u00e9l\u00e9chargez et installez la version qui correspond \u00e0 votre syst\u00e8me d'exploitation (Windows, Mac, Linux).</p> </li> </ol> <p></p> <p></p> <p><p> \u00c9diteur en haut, console en bas </p></p> <p>Travailler dans l'\u00e9diteur ou la console?</p> <p><p> </p></p>"},{"location":"2Cours/01Variables/Variables/","title":"01 Les variables","text":"<p>\u00c9crire un programme, c'est traiter des donn\u00e9es. Le plus souvent num\u00e9riques (entiers ou d\u00e9cimaux) en cours de Math\u00e9matiques ou de Physique-Chimie, elles peuvent \u00eatre aussi d'autres types: cha\u00eene de caract\u00e8res (texte), bool\u00e9ens (vrai/faux), ...</p> <p>Pour stocker, manipuler et modifier ces donn\u00e9es au fil du programme, on cr\u00e9e des variables qui vont permettre de les nommer ces donn\u00e9es et  d'y avoir acc\u00e8s simplement.</p>"},{"location":"2Cours/01Variables/Variables/#1-affectation","title":"1. Affectation","text":"<p>Admettons qu'on souhaite programmer un jeu de combat de Pok\u00e9mons (ou tout autre personnage). Dans ce programme il faudra prendre en compte de nombreux attributs des Pok\u00e9mons, par exemple les points de vie (PV). Pour chaque Pok\u00e9mon, ces PV sont assez \u00e9videmment amen\u00e9s \u00e0 varier tout au long de l'ex\u00e9cution du programme. Le programmeur ne peut donc pas conna\u00eetre la valeur de ces PV pendant le programme. Il lui faut manipuler une variable, c'est \u00e0 dire un nom associ\u00e9 \u00e0 cette valeur, qui elle est stock\u00e9e en m\u00e9moire.</p> <p>Notion de variable</p> <ul> <li> <p>Une variable est une association entre un nom et une valeur.</p> </li> <li> <p>Associer une valeur \u00e0 une variable (nouvelle ou d\u00e9j\u00e0 cr\u00e9\u00e9) s'appelle une affectation. </p> </li> </ul> <p>Par exemple, si mon Pok\u00e9mon a 80 points de vie en d\u00e9but de partie, je peux cr\u00e9er une variable en affectant la valeur 80 au nom <code>pv</code>.</p> <p>En Python, on \u00e9crira:</p> <pre><code>pv = 80\n</code></pre> <p>Vocabulaire</p> <ul> <li> <p>Par abus de langage, on confond souvent variable et nom de variable. Ici on parlera de la variable <code>pv</code>.</p> </li> <li> <p>La premi\u00e8re fois qu'on affecte une valeur \u00e0 une variable, on dit qu'on l'initialise.</p> </li> </ul> <p>Attention</p> <ul> <li>Le symbole <code>=</code> n'a rien \u00e0 voir avec le symbole = utilis\u00e9 en math\u00e9matiques. </li> <li>On commence toujours \u00e0 gauche par la variable \u00e0 affecter, cette instruction n'est pas sym\u00e9trique. On obtiendrait une erreur (essayez) avec: <pre><code>80 = pv\n</code></pre></li> <li>En effet cette instruction est lue par Python de droite \u00e0 gauche : on met la valeur <code>80</code> dans la variable <code>pv</code>. En langage naturel dans un algorithme, on \u00e9crirait : <code>pv \u2190 80</code>. C'est ainsi qu'il faut se le repr\u00e9senter mentalement.</li> </ul> <p> </p> <p>On peut se repr\u00e9senter cette affectation par une m\u00e9taphore, o\u00f9 l'on repr\u00e9sente la m\u00e9moire de l'ordinateur comme une gigantesque commode avec d'innombrables tiroirs.</p> <p>\u00c9tape 1: Lorsqu'on affecte la valeur <code>80</code> \u00e0 la variable <code>pv</code>, l'ordinateur commence par trouver un tiroir vide.</p> <p>\u00c9tape 2: Ensuite il nomme ce tiroir <code>pv</code>, comme s'il lui collait une \u00e9tiquette dessus.</p> <p>\u00c9tape 3: Enfin il d\u00e9pose dans ce tiroir la valeur <code>80</code>.</p> <p>D\u00e9sormais - tant qu'on ne lui aura pas affect\u00e9 une autre valeur - chaque fois qu'on utilisera la variable <code>pv</code> dans notre programme, l'ordinateur utilisera la valeur <code>80</code>.</p> <p>Si on affecte une nouvelle valeur \u00e0 la variable <code>pv</code>, alors l'ancienne dispara\u00eet (on dit qu'elle est \u00e9cras\u00e9e).</p> <p>Attention</p> <p>Dans un programme, toute valeur qu'on souhaite r\u00e9utiliser doit \u00eatre affect\u00e9e \u00e0 une variable. Par exemple, \u00e0 la fin du programme suivant: <pre><code>score_j1 = 0\nscore_j2 = 0\nscore_j1 = score_j1 + 100\nscore_j2 + 200\n</code></pre></p> <p>La variable <code>score_j1</code> contient 100, et la variable <code>score_j2</code> contient toujours 0, car le r\u00e9sultat du calcul ligne 4 n'a pas \u00e9t\u00e9 m\u00e9moris\u00e9... S'il n'est pas affect\u00e9 \u00e0 une variable, il est perdu.</p>"},{"location":"2Cours/01Variables/Variables/#2-expressions-et-evaluation","title":"2. Expressions et \u00e9valuation","text":"<p>Regardons l'exemple suivant:</p> \u00c0 reproduire en console<pre><code>&gt;&gt;&gt; a = 2\n&gt;&gt;&gt; a = 4\n&gt;&gt;&gt; a\n4\n&gt;&gt;&gt; b = a + 3\n&gt;&gt;&gt; b\n7\n&gt;&gt;&gt; b = c + 1\nTraceback (most recent call last):\n  File \"&lt;pyshell&gt;\", line 1, in &lt;module&gt;\nNameError: name 'c' is not defined\n&gt;&gt;&gt; \n</code></pre> <p>Analyse ligne par ligne</p> Ligne 1Ligne 2Lignes 3 et 4Ligne 5Ligne 8 <p>On initialise la variable <code>a</code> \u00e0 <code>2</code>.</p> <p>On r\u00e9affecte une nouvelle valeur, <code>4</code>,  \u00e0 la variable <code>a</code>.</p> <p>On demande la valeur associ\u00e9e \u00e0 <code>a</code>. Python r\u00e9pond logiquement <code>4</code>: la valeur <code>2</code> a \u00e9t\u00e9 \u00e9cras\u00e9e.</p> <p>On cr\u00e9e une nouvelle variable <code>b</code> \u00e0 laquelle on affecte <code>a + 3</code>. Ceci est une expression, Python doit au pr\u00e9alable l'\u00e9valuer avant de l'affecter. Dans l'ordre:</p> <ul> <li>Python lit d'abord le membre de droite <code>a + 3</code>.</li> <li>Il r\u00e9cup\u00e8re la valeur stock\u00e9e dans <code>a</code>, c'est-\u00e0-dire <code>4</code>.</li> <li>Il \u00e9value ensuite l'expression, ici il fait une addition : <code>4 + 3</code>.</li> <li>Il affecte \u00e0 <code>b</code> la somme obtenue, c'est-\u00e0-dire <code>7</code>. On le v\u00e9rifie aux lignes 6 et 7.</li> </ul> <p>On r\u00e9affecte \u00e0 <code>b</code> le r\u00e9sultat de l'expression <code>c + 1</code>. Or aucune variable nomm\u00e9e <code>c</code> n'a \u00e9t\u00e9 d\u00e9clar\u00e9e : on obtient une erreur, puisque Python n'a pas de valeur associ\u00e9e \u00e0 <code>c</code>.</p>"},{"location":"2Cours/01Variables/Variables/#3-types-de-variables","title":"3. Types de variables","text":"<p>Pour l'instant, les variables que nous avons manipul\u00e9es contiennent toutes des nombres entiers.</p> <p>Mais imaginons un programme qui doive manipuler les noms des Pokemons... Ce ne seront plus des nombres, mais des mots cha\u00eenes de caract\u00e8res.</p> <p>Pour diff\u00e9rencier la nature de ce que peut contenir une variable, on parle alors de type de variable.</p> <p>En voici quelques uns, que nous d\u00e9couvrirons au fil de l'ann\u00e9e :</p> <p>Types de base</p> <p>Voici les types Python utilis\u00e9s cette ann\u00e9e:</p> Type Python Traduction Exemple <code>int</code> entier <code>42</code> <code>float</code> flottant (d\u00e9cimal) <code>3.1416</code> <code>str</code> cha\u00eene de caract\u00e8res (string) <code>\"Maths\"</code> <code>bool</code> bool\u00e9en (True ou False) <code>True</code> <code>function</code> fonction <code>print</code> <p>Conna\u00eetre le type d'une variable</p> <p>Il suffit dans la console d'utiliser la fonction <code>type</code>.</p> <pre><code>&gt;&gt;&gt; a = 1\n&gt;&gt;&gt; type(a)\n&lt;class 'int'&gt;\n&gt;&gt;&gt; type(toto)\n???\n</code></pre> En cas d'erreur <p>Une cha\u00eene de caract\u00e8res s'\u00e9crit avec des guillemets. Sans, Python l'interpr\u00e8te comme une variable...</p>"},{"location":"2Cours/02IfElse/IfElse/","title":"02 L'instruction conditionnelle","text":"<p>Un langage de programmation permet d'effectuer des tests sur les valeurs contenues dans les variables et d'ex\u00e9cuter (ou pas) certaines instructions selon le r\u00e9sultat de ces tests. On parle d'instruction conditionnelle qui s'\u00e9crit en Python avec le mot-cl\u00e9 <code>if</code>.</p> <p>Mod\u00e8le</p> <pre><code>if condition :\n    instructions \u00e0 ex\u00e9cuter si condition est vraie\nelse:\n    instructions \u00e0 ex\u00e9cuter si condition est fausse\n</code></pre> <p>Remarques:</p> <ul> <li>Une condition est le plus souvent le r\u00e9sultat de la comparaison de deux valeurs avec les op\u00e9rateurs: <code>&gt;</code>, <code>&gt;=</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>==</code> (\u00e9gal), <code>!=</code> (diff\u00e9rent) ou <code>in</code> (appartient \u00e0).</li> <li>On remarquera \u00e0 nouveau les <code>:</code> en fin de ligne et l'indentation des instructions.</li> <li>la partie du <code>else</code> n'est pas obligatoire.</li> </ul> <p>Exemples</p> <p>Tester chacun des exemples suivants dans l'IDE ci-dessous (ex\u00e9cuter plusieurs fois en changeant la valeur des variables).</p> <p>\u25b6\ufe0f \u2935\ufe0f \u2934\ufe0f </p> Exemple 1Exemple 2Exemple 3Exemple 4 <pre><code>heure = 13\nif heure &gt;= 12:\n    print(\"j'ai faim\")\nelse:\n    print(\"j'ai sommeil\")\n</code></pre> <p>Sans <code>else</code>.</p> <pre><code>mot = \"abracadabra\"\nif \"a\" in mot:\n    print(mot, \" contient au moins un a.\")\n</code></pre> <p>On peut imbriquer les instructions conditionnelles.</p> <pre><code>age = 15\nif age &lt;= 6:\n    print(\"gratuit\")\nelse:\n    if age &gt; 18:\n        print(\"plein tarif\")\n    else:\n        print(\"tarif r\u00e9duit\")\n</code></pre> <p> Il ne faut pas confondre <code>=</code> (affectation d'une valeur \u00e0 une variable) et <code>==</code> (test d'\u00e9galit\u00e9 entre deux valeurs). <pre><code>print(\"Combien fait 7 fois 8?\")\nrep = 42\nif rep == 56:\n    print(\"bonne r\u00e9ponse\")\nelse:\n    print(\"r\u00e9vise les tables\")\n</code></pre></p>"},{"location":"2Cours/03_Boucles/01For/For/","title":"La boucle born\u00e9e (for)","text":"<p>L'un des grands principes de la programmation est le fait de pouvoir r\u00e9p\u00e9ter un certain nombre de fois des instructions (on parle alors de boucle d'instructions), ce qui se faisait en Scratch avec:</p> <p> </p> <p>En Python, l'\u00e9quivalent est la boucle <code>for</code> que l'on a rencontr\u00e9e dans l'activit\u00e9 Pyrates. Elle utilise la fonction <code>range</code> qui g\u00e9n\u00e8re un ensemble d'entiers cons\u00e9cutifs commen\u00e7ant par 0.</p> <p>Mod\u00e8le</p> <p>Pour r\u00e9p\u00e9ter 10 fois des instructions:</p> <pre><code>for k in range(10):\n    instructions\n</code></pre> <p>L'\u00e9quivalent en Scratch:</p> <p> </p> <p>Remarques</p> <ul> <li>Dans cette instruction, <code>k</code> est une variable \u00abcompteur\u00bb : elle est automatiquement augment\u00e9e de 1 \u00e0 chaque passage dans la boucle (on dit incr\u00e9menter en programmation).</li> <li>Ainsi, l'instruction <code>for k in range(10)</code> peut se traduire par \u00ab pour <code>k</code> allant de 0 \u00e0 9\u00bb, ce qui fait bien 10 r\u00e9p\u00e9titions.</li> <li>On peut \u00e9videmment nommer comme on le souhaite cette variable: <code>i</code>, <code>compteur</code>, <code>x</code>, <code>toto</code>, <code>jean_claude</code>...</li> <li>Les instructions \u00e0 r\u00e9p\u00e9ter doivent \u00eatre indent\u00e9es (d\u00e9cal\u00e9es par rapport \u00e0 la marge).</li> <li>On peut utiliser la variable \u00abcompteur\u00bb dans les instructions de la boucle. Ou pas.</li> </ul> <p>Exemples</p> <p>Tester chacun des exemples suivants dans l'IDE ci-dessous.</p> <p>\u25b6\ufe0f \u2935\ufe0f \u2934\ufe0f </p> Exemple 1Exemple 2Exemple 3 Sans utilisation de la variable<pre><code>for k in range(10):\n    print(\"We're up all night to get lucky\")\n</code></pre> Avec utilisation de la variable<pre><code>for i in range(5):\n    j = 2 * i\n    print(j, \" est le double de \", i)\nprint(\"cette instruction n'est pas r\u00e9p\u00e9t\u00e9e puisqu'elle n'est pas indent\u00e9e\")\n</code></pre> En d\u00e9calant le d\u00e9part \u00e0 1 au lieu de 0<pre><code>for n in range(1, 6):\n    print(n)\n</code></pre>"},{"location":"2Cours/03_Boucles/02While/While/","title":"La boucle non born\u00e9e (while)","text":"<p>La boucle <code>for</code> s'utilise lorsqu'on conna\u00eet \u00e0 l'avance le nombre de r\u00e9p\u00e9titions \u00e0 effectuer (un nombre entier). On parle de boucle born\u00e9e.</p> <p>Mais il arrive fr\u00e9quemment qu'on doive r\u00e9p\u00e9ter des instructions un certain nombre de fois, qui n'est pas connu \u00e0 l'avance. On a donc besoin d'une boucle non born\u00e9e,qui est en Scratch:</p> <p> </p> <p>En Python, c'est l'instruction <code>while</code>,  qui s'\u00e9x\u00e9cutera tant qu'une condition est vraie et qui stoppera d\u00e8s que cette condition ne le sera plus.</p> <p>La boucle <code>while</code></p> <p>Syntaxe g\u00e9n\u00e9rale: <pre><code>while condition:\n    *instructions \u00e0 r\u00e9p\u00e9ter*\n</code></pre></p> <p>Remarques</p> <ul> <li>Une condition est le plus souvent le r\u00e9sultat (vrai ou faux) de la comparaison de deux valeurs avec les op\u00e9rateurs: <code>&gt;</code>, <code>&gt;=</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>==</code> (\u00e9gal), <code>!=</code> (diff\u00e9rent) ou <code>in</code> (appartient \u00e0).</li> <li><code>while</code> rep\u00e8te le bloc d'instructions \u00e0 r\u00e9p\u00e9ter tant que cette expression est vraie (\u00e9gale \u00e0 <code>True</code>) ;</li> <li>il faut terminer la ligne commen\u00e7ant par <code>while</code> par <code>:</code> ;</li> <li>le bloc d'instructions \u00e0 r\u00e9p\u00e9ter (le corps de la boucle) doit \u00eatre indent\u00e9.</li> </ul> <p>Exemples</p> <p>Tester chacun des exemples suivants dans Thonny.</p> Exemple 1Exemple 2 <pre><code>rep = \"oui\"\nwhile rep == \"oui\":\n    rep = input(\"voulez-vous que je repose la question? \")\n</code></pre> <pre><code>from random import randint\n\na = randint(1, 10)\nb = randint(1, 10)\nrep = 0\nwhile rep != a*b:\n    rep = int(input(f\"Combien font {a} fois {b} ?\"))\nprint('Bravo')\n</code></pre>"},{"location":"2Cours/04Fonctions/Fonctions/","title":"04 Les fonctions","text":"<p>Une fonction est un bloc d'instructions (au sens de bloc comme en Scratch). Cette fonction peut \u00eatre d\u00e9j\u00e0 d\u00e9finie dans le langage Python ou dans l'un de ses modules, comme par exemple la fonction <code>bin</code> (vue dans l'activit\u00e9 \u00abSyst\u00e8me binaire\u00bb) qui permet d'obtenir l'\u00e9criture binaire d'un nombre entier.</p> <p><pre><code>&gt;&gt;&gt; bin(42)\n'0b101010'\n</code></pre> Dans cet exemple, on dit qu'on a appel\u00e9 la fonction <code>bin</code> avec le param\u00e8tre <code>42</code> et elle a renvoy\u00e9 la valeur <code>'0b101010'</code>.</p> <p>Un autre exemple de fonction classique de Python est la fonction <code>print</code> qui, comme son nom l'indique, permet d'afficher en console ses param\u00e8tres.</p> <p>\u00c0 vous de jouer !</p> <p>Reproduire les instructions suivantes dans la console ci-dessous, en rempla\u00e7ant \u00e9ventuellement le pr\u00e9nom par le v\u00f4tre.</p> <pre><code>&gt;&gt;&gt; print(\"Hello world!\")\n&gt;&gt;&gt; prenom = \"Gabriel\"\n&gt;&gt;&gt; print(prenom)\n&gt;&gt;&gt; print(\"Bonjour \", prenom)\n</code></pre> <p>&gt;&gt;&gt; </p> <p> Une fonction peut ne pas prendre de param\u00e8tre comme la fonction <code>avancer</code> de l'activit\u00e9 Pyrates mais il faut l'appeler quand m\u00eame avec des parenth\u00e8ses vides !</p> <p>Cr\u00e9er une fonction</p> <p>On peut d\u00e9finir sa propre fonction avec le mot-cl\u00e9 <code>def</code> en :</p> <ul> <li>lui donnant un nom qui n'existe pas d\u00e9j\u00e0</li> <li>terminant la premi\u00e8re ligne par <code>:</code> </li> <li>en indentant (c'est-\u00e0-dire d\u00e9caler de la marge de 4 espaces - ou en utilisant la touche TAB) le bloc d'instructions qui constitue la fonction.</li> </ul> <p>Exemple 1: avec param\u00e8tre, sans valeur renvoy\u00e9e</p> <p>Copier-coller la fonction suivante dans l'IDE int\u00e9gr\u00e9 ci-dessous, l'ex\u00e9cuter en cliquant sur le bouton triangle, et appeler (plusieurs fois) la fonction dans la console en changeant la valeur du param\u00e8tre.</p> <pre><code>def chat(n):\n    print(\"je miaule beaucoup\")\n    print(n * \"miaou \")\n</code></pre> <p>\u25b6\ufe0f \u2935\ufe0f \u2934\ufe0f </p> <p>Exemple 2: avec param\u00e8tre, avec valeur renvoy\u00e9e</p> <p>On peut faire renvoyer une valeur par une fonction avec le mot-cl\u00e9 <code>return</code>.</p> <ol> <li> <p>Copier-coller la fonction suivante dans l'IDE int\u00e9gr\u00e9 ci-dessous puis l'ex\u00e9cuter en cliquant sur le bouton triangle.</p> <pre><code>def programme_calcul(x):\n    res = x + 3\n    res = res**2 - 1\n    return res\n</code></pre> </li> <li> <p>Dans la console, reproduire les instructions suivantes:</p> <pre><code>&gt;&gt;&gt; a = programme_calcul(2)\n&gt;&gt;&gt; a\n&gt;&gt;&gt; b = programme_calcul(7)\n&gt;&gt;&gt; b\n</code></pre> </li> <li> <p>\u00c0 quel calcul math\u00e9matique correspond l'op\u00e9rateur <code>**</code> ?</p> </li> </ol> <p>\u25b6\ufe0f \u2935\ufe0f \u2934\ufe0f </p>"},{"location":"3Exercices/Fiche1/","title":"Fiche d'exercices 1","text":""},{"location":"3Exercices/Fiche1/#prequel-affichage","title":"Pr\u00e9quel : Affichage","text":"<p>En g\u00e9n\u00e9ral, lorsqu'un d\u00e9veloppeur apprend un nouveau langage de programmation, la premi\u00e8re chose qu'il fait, c'est d'afficher le texte \"Hello World!\"...</p> Version 1Version 2 <pre><code>print(\"Hello World!\")\n</code></pre> <pre><code>texte = \"Hello World!\"\nprint(texte)\n</code></pre>"},{"location":"3Exercices/Fiche1/#s01e01-la-variable","title":"S01E01: la variable","text":"<p>La diff\u00e9rence entre les deux programmes pr\u00e9c\u00e9dents, c'est qu'au premier on a affich\u00e9 directement un texte (on dit plut\u00f4t une cha\u00eene de caract\u00e8res) \u00e0 l'aide de la fonction <code>print()</code>, alors que dans le deuxi\u00e8me on a d'abord stock\u00e9 cette cha\u00eene de caract\u00e8res dans une variable nomm\u00e9e <code>texte</code> (on dit qu'on a affect\u00e9 la valeur <code>\"Hello World!\"</code> \u00e0 la variable <code>texte</code> \u00e0 l'aide de l'op\u00e9rateur <code>=</code>).</p> <p>Attention</p> <p>Notez la pr\u00e9sence indispensable de guillemets pour diff\u00e9rencier une chaine de caract\u00e8res d'un nom de variable (ou d'un mot-cl\u00e9 du langage).</p> <p>Tester et observer le code suivant: <pre><code>groot  = \"toto\"\nprint(\"Je s'appelle\", \"groot\")\nprint(\"Je s'appelle\", groot)\n</code></pre></p> <p>Exercice  1</p> \u00c9nonc\u00e9Indication <p>Affecter \u00e0 la variable <code>prenom</code> la cha\u00eene de caract\u00e8re correspondant ... \u00e0 votre pr\u00e9nom, puis ex\u00e9cuter la cellule.</p> <pre><code>prenom = \nprint(\"Je m'appelle\", prenom)\n</code></pre> <p>Si vous avez eu une erreur de type <code>NameError</code>, c'est que vous avez oubli\u00e9 les guillemets. Ils sont essentiels, pour faire la diff\u00e9rence entre une cha\u00eene de caract\u00e8res et le nom d'une variable.</p> <p>Exercice  2</p> \u00c9nonc\u00e9Correction <p>La plupart du temps, on n'utilisera pas des cha\u00eenes de caract\u00e8res, mais plut\u00f4t des nombres.</p> <pre><code>a = 18         # on affecte la valeur (num\u00e9rique) 18 \u00e0 la variable nomm\u00e9e a\nb = 4 + 2 * 10 # on affecte le r\u00e9sultat du calcul 4 + 2 * 10 \u00e0 la variable b (* signifie 'fois')\nprint(a)\nprint(b)\n</code></pre> <p>\u00c9crire un programme o\u00f9:</p> <ul> <li>on affectera la valeur 10 \u00e0 une variable <code>x</code>;</li> <li>on affectera la valeur 20 \u00e0 une variable <code>y</code>;</li> <li>on affichera la somme des deux variables</li> </ul> <p>En changeant ensuite uniquement la valeur de <code>x</code>, et en \u00e9x\u00e9cutant \u00e0 nouveau la cellule, la somme doit s'actualiser automatiquement.</p> <pre><code>x = 10\ny = 20\nprint(x+y)\n</code></pre> <p>Exercice  3</p> \u00c9nonc\u00e9Correction <p>Lire les programmes ci-dessous, et essayer de deviner ce qu'ils afficheront lors de l'ex\u00e9cution. V\u00e9rifier en les ex\u00e9cutant.</p> Programme 1Programme 2 <pre><code>a = 7\nb = a + 3\nc = 2 * a\nprint(c / b)\n</code></pre> <pre><code>a = 5\na = a + 1\na = 2 * a\nprint(a)\n</code></pre> <p>Incr\u00e9mentation</p> <p>Dans le programme 2 pr\u00e9c\u00e9dent, l'instruction <code>a = a + 1</code> m\u00e9rite toute notre attention...</p> <p>Observ\u00e9e avec des yeux de math\u00e9maticien, la pr\u00e9c\u00e9dente instruction est une horreur.</p> <p> </p> <p>Vue avec des yeux d'informaticien, voil\u00e0 comment est interpr\u00e9t\u00e9e la commande :</p> <ol> <li>On \u00e9value la partie droite de l'\u00e9galit\u00e9, c'est-\u00e0-dire l'expression <code>a + 1</code>.</li> <li>On va donc chercher le contenu de la variable <code>a</code>. Si celle-ci n'existe pas, un message d'erreur est renvoy\u00e9.</li> <li>On additionne 1 au contenu de la variable <code>a</code>.</li> <li>On \u00e9crase le contenu actuel de la variable <code>a</code> avec la valeur obtenue au 3.</li> </ol> <p>\u00c0 la fin de ces op\u00e9rations, la variable <code>a</code> a bien augment\u00e9 de 1.</p> <p>Cette proc\u00e9dure, appel\u00e9e incr\u00e9mentation, est tr\u00e8s tr\u00e8s classique, il faut la ma\u00eetriser parfaitement car on va la retrouver tr\u00e8s souvent!</p> <p>Exercice  4</p> \u00c9nonc\u00e9Correction <p>Trouver \u00e0 quoi correspondent les op\u00e9rateurs <code>//</code> et <code>%</code> en ex\u00e9cutant plusieurs fois la cellule suivante en modifiant les valeurs des variables <code>a</code> et <code>b</code>:</p> <pre><code>a = 42\nb = 5\nprint(a // b)\nprint(a % b)\n</code></pre> <ul> <li>l'op\u00e9rateur <code>//</code> donne le quotient dans la division euclidienne;</li> <li>l'op\u00e9rateur <code>%</code> donne le reste dans la division euclidienne.</li> </ul>"},{"location":"3Exercices/Fiche2/","title":"Fiche d'exercices 2","text":"<p>Exercice  1</p> \u00c9nonc\u00e9Correction <p>Voici ci-dessous le code de la fonction <code>lancer_de_truque</code> de l'exercice 1 de la fiche d'exercices sur les probabilit\u00e9s:</p> <pre><code>from random import randint\n\ndef lancer_de_truque():\n    face = randint(0, 8)\n    if face &lt;= 1:\n        return 1\n    elif face &gt;= 6:\n        return 6\n    else:\n        return face\n</code></pre> <p>Modifier (en plus simple) ce programme pour que le de truqu\u00e9:</p> <ul> <li>donne un 6 avec une probabilit\u00e9 de \\(0,5\\);</li> <li>donne chacune des autres faces avec la m\u00eame probabilit\u00e9.</li> </ul> <p>Exercice  2</p> \u00c9nonc\u00e9Correction <p>Reprendre l'exemple 2 du cours sur la boucle <code>while</code>.</p> <p>Ajouter une variable <code>c</code>  (comme compteur) qui donnera en fin de programme le nombre de tentatives pour donner la bonne r\u00e9ponse.</p> <p>Questions \u00e0 se poser:</p> <ul> <li>Quelle est sa valeur initiale, c'est-\u00e0-dire avant de commencer \u00e0 poser la question?</li> <li>De combien augmente-t-elle \u00e0 chaque tentative?</li> </ul> <p>Exercice  3</p> \u00c9nonc\u00e9Correction <p>Une feuille de papier \u00e0 une \u00e9paisseur de \\(0,1\\) mm. La tour Eiffel a une hauteur de 324 m.</p> <p>En imaginant qu'on puisse plier en deux la feuille de papier autant de fois que souhait\u00e9 (ce qui n'est pas possible IRL), combien de pliages seraient n\u00e9cessaires pour que l'\u00e9paisseur du papier d\u00e9passe la tour Eiffel?</p> <p>Compl\u00e9ter et ex\u00e9cuter le programme suivant pour r\u00e9pondre \u00e0 la question.</p> <pre><code>epaisseur = \npliages = \n\nwhile ... :\n    epaisseur = \n    pliages = \n\nprint(...)\n</code></pre>"},{"location":"3Exercices/sissa/","title":"La l\u00e9gende de Sissa","text":"<p>La cr\u00e9ation du jeu des \u00e9checs</p> <p>Le roi Belkib (Indes) promit une r\u00e9compense fabuleuse \u00e0 qui lui proposerait une distraction qui le satisferait. Lorsque le sage Sissa, fils du Brahmine Dahir, lui pr\u00e9senta le jeu d'\u00e9checs, le souverain, demanda \u00e0 Sissa ce que celui-ci souhaitait en \u00e9change de ce cadeau extraordinaire.</p> <p>Sissa demanda au prince de d\u00e9poser un grain de riz sur la premi\u00e8re case, deux sur la deuxi\u00e8me, quatre sur la troisi\u00e8me, et ainsi de suite pour remplir l'\u00e9chiquier en doublant la quantit\u00e9 de grain \u00e0 chaque case.  Le prince accorda imm\u00e9diatement cette r\u00e9compense sans se douter de ce qui allait suivre.</p> <p>Son conseiller lui expliqua qu'il venait de pr\u00e9cipiter le royaume dans la ruine car les r\u00e9coltes de l'ann\u00e9e ne suffiraient pas \u00e0 payer Sissa.</p> <ol> <li>Calculer le nombre de grains de riz que le roi Belkib aurait d\u00fb \u00e0 Sissa si l'\u00e9chiquier ne comportait que 4 cases.</li> <li>M\u00eame question avec 8 cases.</li> <li> <p>Pour 64 cases, le calcul est beaucoup trop long, on va plut\u00f4t \u00e9crire un petit programme o\u00f9:</p> <ul> <li>la variable <code>c</code> d\u00e9signera le num\u00e9ro de la case;</li> <li>la variable <code>g</code> d\u00e9signera le nombre de grains de riz sur la case;</li> <li>la variable <code>t</code> d\u00e9signera le nombre total de grains de riz.</li> </ul> <p>Compl\u00e9ter et ex\u00e9cuter le programme suivant pour qu'il r\u00e9ponde au probl\u00e8me.</p> <pre><code>t = \nfor ... in range(...):\n    g = ...\n    t = ...\nprint(...)\n</code></pre> </li> </ol>"},{"location":"4Activites/Rosette/","title":"Pierre de Rosette","text":"<p>Le script Scratch donn\u00e9 ci-dessus (issu d\u2019une \u00e9preuve du DNB de 2018) a \u00e9t\u00e9 traduit dans le langage Python en dessous.</p> <pre><code>from turtle import *\nspeed('fast')\n\ndef carre():\n    down()\n    for i in range(4):\n        forward(cote)\n        left(90)\n    up()\n\ncolor('red')\ngoto(-200,0)\nclear()\nwidth(2)\ncote = 40\nfor i in range(4):\n    carre()\n    forward(cote)\n    cote = cote + 20\n    if cote &gt; 90:\n        color('blue')\n</code></pre> <p>\u00c0 vous de jouer!</p> <p>\u00c0 l'aide de la traduction en Python du script Scratch pr\u00e9c\u00e9dent, traduire le script ci-dessous:</p> <p> </p>"},{"location":"4Activites/arithmetique/","title":"Arithm\u00e9tique","text":""},{"location":"4Activites/arithmetique/#1-diviseurs","title":"1- Diviseurs","text":"<p>Notion de diviseur</p> <p>En arithm\u00e9tique, la notion centrale est la notion de divisibilit\u00e9: un nombre \\(k\\) est un diviseur d'un nombre \\(n\\) si et seulement s'il existe un nombre \\(q\\) tel que \\(n = k \\times q\\).</p> <p>Autrement dit, \\(k\\) est un diviseur de \\(n\\) si la division \u00abtombe juste\u00bb, c'est-\u00e0-dire si le reste dans la division euclidienne de \\(n\\) par \\(k\\) est \u00e9gal \u00e0 \\(0\\).</p> <p>Op\u00e9rateur <code>%</code> (modulo)</p> <p>En Python, on obtient le reste de la division euclidienne avec l'op\u00e9rateur <code>%</code>.</p> <p>Par exemple: </p> <pre><code>&gt;&gt;&gt; 42 % 2\n0\n&gt;&gt;&gt; 15 % 2\n1\n&gt;&gt;&gt; 161 % 13\n5\n</code></pre> <p>En g\u00e9n\u00e9ral, le reste en lui-m\u00eame n'est pas int\u00e9ressant, seul importe de savoir s'il est nul (et alors on est en situation de divisibilit\u00e9). On peut donc seulement tester l'\u00e9galit\u00e9 entre le reste et 0, et Python donnera une r\u00e9ponse <code>True</code> (si l'\u00e9galit\u00e9 est vraie) ou <code>False</code>:</p> <pre><code>&gt;&gt;&gt; 8 % 2 == 0\nTrue\n&gt;&gt;&gt; 47 % 5 == 0\nFalse\n</code></pre> <p>Exercice  1: \u00e0 la main</p> \u00c9nonc\u00e9Correction <p>En utilisant la console Python ci-dessous, d\u00e9terminer:</p> <ol> <li>le reste dans la division de 2024 par 47.</li> <li>si 198 est divisible par 11</li> <li>si 7 est un diviseur de 356.</li> </ol> <p>&gt;&gt;&gt; </p> <p>On tape les instructions: <pre><code>&gt;&gt;&gt; 2024 % 47\n3\n&gt;&gt;&gt; 198 % 11 == 0\nTrue\n&gt;&gt;&gt; 356 % 7 == 0\nFalse\n</code></pre></p> <p>Exercice  2 : automatisation avec Python</p> \u00c9nonc\u00e9Correction <p>Pour obtenir tous les diviseurs d'un nombre \\(n\\), on teste tous les nombres inf\u00e9rieurs ou \u00e9gaux \u00e0 \\(n\\) pour savoir si ce sont des diviseurs.</p> <p>En Python, on va donc faire une boucle <code>for</code> pour passer en revue tous les nombres \\(k\\) inf\u00e9rieurs ou \u00e9gaux \u00e0 \\(n\\) et tester la divisibilit\u00e9 de \\(n\\) par \\(k\\) comme fait pr\u00e9c\u00e9demment.</p> <p>Copier-coller le code suivant dans le mini-IDE ci-dessous et le compl\u00e9ter. V\u00e9rifier en changeant la valeur de \\(n\\) (avec les exemples faits dans la le\u00e7on par exemple).</p> <pre><code>n = 40\nfor k in range(..., ...):\n    if ... :\n        print(...)\n</code></pre> <p>\u25b6\ufe0f \u2935\ufe0f \u2934\ufe0f </p> <p>Exercice  3</p> \u00c9nonc\u00e9Correction <p>Utiliser le programme pr\u00e9c\u00e9dent pour obtenir la liste des diviseurs de :</p> <ol> <li>1445</li> <li>115940</li> <li>1655769</li> </ol>"},{"location":"4Activites/arithmetique/#2-nombres-premiers","title":"2- Nombres premiers","text":"<p>Notion de nombre premier</p> <p>Pour rappel, un nombre entier est dit premier s'il poss\u00e8de exactement deux diviseurs: 1 et lui-m\u00eame.</p> <p>Pour d\u00e9terminer si un nombre est premier, on cherche des diviseurs... et on s'arr\u00eate d\u00e8s qu'on en a trouv\u00e9 un (autre que 1 et lui-m\u00eame bien entendu).</p> <p>On rappelle qu'on arr\u00eate la recherche \u00e0 la racine carr\u00e9e du nombre.</p> <p>Exercice  4 : \u00e0 la main</p> \u00c9nonc\u00e9Correction <p>D\u00e9terminer si \\(391\\) et \\(1249\\) sont des nombres premiers.</p> <p>Vous pouvez utiliser la calculatrice ou la console Python ci-dessous pour faire la recherche des diviseurs.</p> <p>&gt;&gt;&gt; </p> <p>Exercice  5 : automatisation avec Python</p> \u00c9nonc\u00e9Indications/aidesCorrection <p>On veut d\u00e9sormais construire une fonction appel\u00e9e <code>est_premier</code> qui va prendre un nombre entier <code>n</code> en param\u00e8tre et qui va renvoyer <code>True</code> ou <code>False</code> selon que le nombre <code>n</code> est premier ou non.</p> <p>L'id\u00e9e est de faire \u00e0 peu pr\u00e8s la m\u00eame chose que dans le programme de recherche (et d'affichage) des diviseurs de la premi\u00e8re partie, \u00e0 la diff\u00e9rence pr\u00e8s qu'on ne souhaite pas afficher les diviseurs, mais renvoyer une valeur d\u00e8s qu'un diviseur est trouv\u00e9.</p> <ul> <li>on commence la recherche \u00e0 2 et on s'arr\u00eate \u00e0 \\(n-1\\), attention donc \u00e0 bien param\u00e9trer le <code>range</code> de la boucle <code>for</code> . On ne s'emb\u00eate pas ici avec la racine carr\u00e9e, tant pis si on fait faire trop de calculs \u00e0 l'ordinateur, il est l\u00e0 pour \u00e7a, ne vous inqui\u00e9tez pas il ne r\u00e2lera pas.</li> <li>remplacer dans le programme pr\u00e9c\u00e9dent l'instruction <code>print(k)</code> par <code>return False</code>.</li> <li>apr\u00e8s la boucle, si le programme en arrive l\u00e0, c'est qu'aucun diviseur n'a \u00e9t\u00e9 trouv\u00e9... que faut-il alors que la fonction renvoie?</li> <li>v\u00e9rifier que la fonction donne le bon r\u00e9sultat sur quelques nombres simples.</li> </ul> <p>\u25b6\ufe0f \u2935\ufe0f \u2934\ufe0f </p> <p>Exercice  6</p> \u00c9nonc\u00e9Correction <p>Utiliser dans la console la fonction pr\u00e9c\u00e9dente pour d\u00e9terminer si les nombres suivants sont premiers ou non.</p> <ol> <li>157</li> <li>2963</li> <li>6219</li> <li>44773</li> <li>10902070213</li> </ol>"},{"location":"4Activites/devin/","title":"Le devin","text":""},{"location":"4Activites/devin/#contexte-du-probleme","title":"Contexte du probl\u00e8me","text":"<p>Le devin a-t-il eu raison de choisir VII ?</p>"},{"location":"4Activites/devin/#simulation","title":"Simulation","text":"<p>La fonction <code>randint(a, b)</code> du module <code>random</code> permet de choisir pseudo-al\u00e9atoirement un nombre entier (<code>int</code>) entre deux bornes a et b.</p> <p>Pour simuler le lancer d'un d\u00e9, on pourra donc utiliser <code>randint(1, 6)</code>.</p> <pre><code>&gt;&gt;&gt; randint(1, 6)\n2\n&gt;&gt;&gt; randint(1, 6)\n5\n</code></pre> \u00c0 compl\u00e9ter dans l'\u00e9diteur<pre><code>from random import randint\n\nde1 = randint(1, 6)\n</code></pre> <ol> <li> <p>Cr\u00e9er une deuxi\u00e8me variable simulant le lancer d'un deuxi\u00e8me d\u00e9, puis afficher la somme des deux d\u00e9s.</p> </li> <li> <p>Cr\u00e9er une boucle pour simuler 100 lancers de deux d\u00e9s.</p> </li> <li> <p>Ajouter une variable \u00abcompteur\u00bb qui d\u00e9terminera le nombre de lancers dont la somme vaut 7.</p> </li> <li> <p>Afficher la proportion de lancers dont la somme vaut 7.</p> </li> <li> <p>Transformer le code en une fonction <code>simul2lancers</code> qui prendra deux param\u00e8tres: <code>s</code> la somme cherch\u00e9e et <code>n</code> le nombre de lancers.</p> </li> </ol>"},{"location":"4Activites/lgn/","title":"Loi des grands nombres","text":"<ol> <li> <p>Que fait le programme suivant (sans se soucier des instructions commen\u00e7ant par <code>plt.</code>) ?     <pre><code>from random import randint\nfrom math import sqrt\nimport matplotlib.pyplot as plt\n\nn = 50\ncompteur = 0\np = 1/6\n\nplt.figure()\nfor k in range(1, n + 1):\n    de = randint(1, 6)\n    if de == 6:\n        compteur = compteur + 1\n    f = ...\n    plt.plot(k,f, \"or\", markersize=1)\n\nplt.show()\n</code></pre></p> </li> <li> <p>Compl\u00e9ter la ligne 14 pour que la variable <code>f</code> contienne la valeur de la fr\u00e9quence (proportion) de 6 au bout du k-i\u00e8me lancer.</p> </li> <li> <p>Ajouter dans la boucle une instruction pour placer le point de coordonn\u00e9es \\((k ; p)\\) en vert.</p> </li> <li> <p>Ajouter dans la boucle deux instructions pour placer les points de coordonn\u00e9es \\((k ; p-\\frac{1}{\\sqrt{k}})\\)  et \\((k ; p+\\frac{1}{\\sqrt{k}})\\) en bleu.</p> </li> <li> <p>Ex\u00e9cuter le programme pour plusieurs valeurs de <code>n</code>.</p> </li> </ol>"},{"location":"4Activites/montecarlo/","title":"M\u00e9thode de Monte-Carlo","text":"<p>Objectif: on veut estimer l'aire sous une courbe, par exemple l'aire sous la courbe de \\(f(x)=x^2\\) sur l'intervalle \\([0 ; 1]\\).</p> <p> </p> <p>Principe: on choisit al\u00e9atoirement un (assez grand) nombre de points, et pour chacun on regarde s'il est au dessus ou en dessous de la courbe. La proportion de points en dessous de la courbe donne une estimation de l'aire cherch\u00e9e.</p> <p> </p> <ol> <li> <p>Si le point choisi al\u00e9atoirement est de coordonn\u00e9es \\((0,2 ; 0,8)\\), est-il au dessus ou en dessous de la courbe? Pourquoi?</p> </li> <li> <p>Si le point choisi al\u00e9atoirement est de coordonn\u00e9es \\((0,2 ; 0,01)\\), est-il au dessus ou en dessous de la courbe? Pourquoi?</p> Indication <p> </p> </li> <li> <p>Compl\u00e9ter ligne 4 le code de la fonction <code>f</code>.</p> </li> <li> <p>Ligne 7, d\u00e9finir une variable qui comptera le nombre de points en dessous de la courbe de \\(f\\).</p> </li> <li> <p>Compl\u00e9ter l'instruction <code>if</code> de la ligne 12 pour d\u00e9terminer si le point \\((x ; y)\\) est au dessus ou en dessous de la courbe.</p> </li> <li> <p>Actualiser la valeur de la variable compteur ligne 13.</p> </li> <li> <p>Ligne 17, compl\u00e9ter la fonction print pour qu'elle affiche la proportion de points sous la courbe.</p> </li> <li> <p>Comment obtenir une estimation plus pr\u00e9cise?</p> </li> </ol> \u00c0 compl\u00e9ter dans l'\u00e9diteur<pre><code>import matplotlib.pyplot as plt\nfrom random import random\ndef f(x):\n    ...\n\nn = 100\n...\n\nfor k in range(n):\n    x = random() # la fonction random permet de choisir \n    y = random() # al\u00e9atoirement un r\u00e9el compris entre 0 et 1\n    if ... :\n        ...\n        plt.plot(x, y, \"og\")\n    else:\n        plt.plot(x, y, \"or\")\nprint(...)\nplt.show()\n</code></pre>"},{"location":"4Activites/pentagone/","title":"R\u00e9gulier ou pas?","text":"<p>Objectif</p> <p>Il s'agit de r\u00e9pondre \u00e0 la question 2 de l'exercice 6 de la feuille \u00abChap.05 : G\u00e9om\u00e9trie Plane\u00bb.</p> <p> </p> <p>Pour effectuer les calculs, on va \u00e9crire une fonction Python qui va calculer la distance entre deux points.</p> <p>Prequel 1: carr\u00e9 et racine carr\u00e9e en Python</p> <ol> <li> <p>En Python, l'op\u00e9rateur \u00abpuissance\u00bb est <code>**</code>. Par exemple, pour calculer \\(5^3\\), on tapera <code>5 ** 3</code>.</p> <p>Dans la console de Thonny, calculer \\(5^3\\), \\(42^5\\) et \\(16^2\\).</p> </li> <li> <p>En revanche, il n'existe pas d'op\u00e9rateur \u00abracine carr\u00e9e\u00bb. Il faut l'importer d'une biblioth\u00e8que nomm\u00e9e <code>math</code> (comme c'est \u00e9trange, non?). L'op\u00e9rateur se nomme <code>sqrt</code>, raccourci de square root en anglais (je ne vous fais pas l'injure de traduire).</p> <p>Taper les instructions suivantes dans la console de Thonny:</p> <pre><code>&gt;&gt;&gt; from math import sqrt\n&gt;&gt;&gt; sqrt(25)\n&gt;&gt;&gt; sqrt(2)\n</code></pre> <p>Que remarquez-vous?</p> </li> <li> <p>Dans l'\u00e9diteur de Thonny, copier-coller le programme suivant:</p> <pre><code>from math import sqrt\n\nfor k in range(50):\n    print(k)\n</code></pre> <ol> <li>Que va-t-il faire? Le v\u00e9rifier en l'ex\u00e9cutant.</li> <li>Le modifier pour qu'il affiche les racines carr\u00e9es des nombres entiers compris entre 0 et 100.</li> </ol> </li> </ol> <p>Prequel 2: rappel sur les fonctions</p> <ol> <li>En Python, quel est le mot-cl\u00e9 qui permet de d\u00e9finir une fonction?</li> <li>Quel est celui qui permet de renvoyer une valeur?</li> <li>Comment indique-t-on le bloc d'instruction(s) qui constitue la fonction (on parle du corps de la fonction)?</li> </ol> <p>La fonction <code>distance</code></p> <p>Si vous ne vous souvenez plus () de la formule donnant la distance entre deux points, commencez par la retrouver dans la le\u00e7on.</p> <ol> <li>Combien de param\u00e8tres prend cette fonction? Trad: de combien de nombres a-t-on besoin pour pouvoir calculer?</li> <li> <p>En nommant par exemple <code>xA</code> pour \\(x_A\\), \u00e9crire la fonction <code>distance</code> demand\u00e9e. Indication: il n'y a qu'une seule instruction, on renvoie simplement la formule \u00e9crite \u00e0 l'aide des param\u00e8tres et des op\u00e9rateurs (attention n\u00e9anmoins aux parenth\u00e8ses). </p> <p>V\u00e9rifier dans la console avec les points de coordonn\u00e9es \\((2; 1)\\) et \\((6; 4)\\), la fonction doit renvoyer la valeur <code>5.0</code>.</p> </li> </ol> <p>La r\u00e9ponse \u00e0 la question 2. de l'exercice 6</p> <p>Utiliser en console - autant de fois qu'il le faut - la fonction <code>distance</code> pour r\u00e9pondre.</p>"}]}